#/*******************************************************************************
#Autor: Jo√£o Marcus Ribeiro da Silva
#Componente Curricular: MI-Algoritmos I
#Concluido em: 26/10/2024
#Declaro que este c√≥digo foi elaborado por mim de forma individual e n√£o cont√©m nenhum
#trecho de c√≥digo de outro colega ou de outro autor, tais como provindos de livros e
#apostilas, e p√°ginas ou documentos eletr√¥nicos da Internet. Qualquer trecho de c√≥digo
#de outra autoria que n√£o a minha est√° destacado com uma cita√ß√£o para o autor e a fonte
#do c√≥digo, e estou ciente que estes trechos n√£o ser√£o considerados para fins de avalia√ß√£o.
#******************************************************************************************/
#Sistema operacional utilizado= Windows / "os.system("cls")

#Bibliotecas utilizadas:
import random #biblioteca j√° √© do python
import time #biblioteca j√° √© do python
import os #biblioteca j√° √© do python
import keyboard #Necessita de instala√ß√£o, "pip install keyboard" (no terminal)
import numpy as np #Necessita de instala√ß√£o, "pip install numpy" (no terminal)

# Fun√ß√£o que imprime a o tabuleiro: 
def imprimirMatriz(tabuleiro,Pontua√ß√£o,jogador):

    #Imprime o tabuleiro.
    for l in range(len(tabuleiro)):
        for c in range (len(tabuleiro[0])):
            print(tabuleiro[l][c], end="")
        print("")
    #Imprime a pontua√ß√£o e o nome do jogador embaixo do tabuleiro.
    print(f"Pontua√ß√£o: {Pontua√ß√£o}\t{"Player:\033[037m"}{jogador}")

# Fun√ß√£o que escolhe a pe√ßa no in√≠cio do tabuleiro.
def escolherForma(formas):
    #Escolhe as pe√ßas aleatoriamente.
    Formato=random.choice(formas)
    return Formato
    #peca_I, peca_T, peca_J, peca_L, peca_O, peca_S, peca_Z,bomba

# Fun√ß√£o que posiciona uma pe√ßa no tabuleiro.
def ColocarPeca(matriz, peca, coluna, nova_linha):

    #Verifica o formato da peca.
    for l in range(len(peca)):
        for c in range(len(peca[0])):
            #Insere de acordo com o formato verificado.
            if peca[l][c] == "üü™":
                matriz[nova_linha+l][coluna+c]="üü™"
            if peca[l][c]=="üí£":
               matriz[nova_linha+l][coluna+c]="üí£" 
    
    return matriz,nova_linha

#Fun√ß√£o de movimenta√ß√£o:
def movimentar(matriz,peca,coluna, nova_linha):

    #Se o usu√°rio apertar a tecla "-->" (seta para direita).
    if keyboard.is_pressed("right"):
        # Verifica se pode mover para a direita.
        if Verificar(matriz,peca,coluna+1, nova_linha) and coluna<11-len(peca[0]):
            #Adiciona +1 na coluna movendo a pe√ßa para direita.
            coluna += 1

    #Se o usu√°rio apertar a tecla "<--" (seta para esquerda).
    elif keyboard.is_pressed("left"):
        # Verifica se pode mover para a esquerda.
        if Verificar(matriz,peca,coluna-1, nova_linha) and coluna>1:
            #Subtrai -1 na coluna movendo a pe√ßa para esquerda.
            coluna -= 1
     
    return coluna

#Fun√ß√£o de girar
def girar(matriz,peca,coluna, nova_linha):
    #Se o usu√°rio apertar a tecla "^" (seta para cima).
    #                              |
    if keyboard.is_pressed("up"):

        #Gira a pe√ßa em 90¬∞ no sentido anti-hor√°rio. 
        giro_peca = np.rot90(peca, k=1, axes=(0,1))
        #Chama a fun√ß√£o de verifica√ß√£o, para identificar se pode ou n√£o girar a pe√ßa.
        if Verificar(matriz,giro_peca,coluna, nova_linha):
            #Atualiza a vari√°vel pe√ßa j√° girada
            peca=giro_peca
            return peca
        
    return peca

#Fun√ß√£o de explos√£o da bomba:
def Bomba (matriz,peca,coluna,nova_linha,Pontua√ß√£o,jogador):
    #Percorre pelo tamanho da bomba
    for i in range(len(peca)):
        for j in range (len(peca[0])):
            if peca[i][j]=="üí£":
                for c in range(-1,2):
                    #Verifica o alcance da explos√£o, evitando passar do limite do tabuleiro
                    if matriz[nova_linha][coluna+c]!="üí•" and matriz[nova_linha][coluna+c] !="|":
                        for l in range(-1,2):

                            if nova_linha!=0:
                                #Verifica se a posi√ß√£o da bomba est√° no limite de linhas do tabuleiro 
                                if nova_linha+1<len(matriz):
                                    matriz[nova_linha+l][coluna+c]="üí•" #Substitui os valores
                            #Mini bloco que evita a explos√£o no in√≠cio do tabuleiro, para que o alcance n√£o chegue ao final 
                                elif l<1:
                                    matriz[nova_linha+l][coluna+c]="üí•" #Substitui os valores
                            else:
                                if l>-1:
                                    matriz[nova_linha+l][coluna+c]="üí•" #Substitui os valores
                #Mostra a √°rea explodida da bomba       
                imprimirMatriz(matriz,Pontua√ß√£o,jogador)
                time.sleep(0.2)
                os.system("cls")
                #Preenche todos os espa√ßos explodidos pelo fundo do tabuleiro
                for l in range (len(matriz)):
                    for c in range(len(matriz[0])):
                        if matriz[l][c]=="üí•":
                            matriz[l][c]="‚¨õ"
                #Mostra a atualiza√ß√£o do tabuleiro ap√≥s a explos√£o               
                imprimirMatriz(matriz,Pontua√ß√£o,jogador)
                time.sleep(0.2)
                os.system("cls")

#Fun√ß√£o que verifica a maioria das intera√ß√µes entre as pe√ßas e o tabuleiro              
def Verificar(matriz,peca,coluna, nova_linha):
    
    for l in range(len(peca)):
        descer=True
        for c in range(len(peca[l])):
            if peca[l][c]!="‚¨õ":
                #Verifica se √© a √∫ltima linha do tabuleiro
                if nova_linha+l+1>=len(matriz):
                    return False

                #Verifica se √© a √∫ltima linha da peca
                if l+1<len(peca):

                    #Verifica se abaixo da bloco preenchido tem outro bloco da pr√≥pria pe√ßa
                    if peca[l+1][c]!="üü™":
                        #Se n√£o houver bloco, a vari√°vel descer armazena o valor e aguarda a pr√≥xima verifica√ß√£o
                        descer=True
                    #Se houver, descer armazena False, e aguarda a pr√≥xima verifica√ß√£o    
                    else:
                        descer=False
                # Verifica se o bloco abaixo do observado abaixo n√£o est√° preenchido
                if matriz[nova_linha + l + 1][coluna + c] !="‚¨õ" and descer: 
                    return False
                
    return True

#Fun√ß√£o de apagar pe√ßa na posi√ß√£o antiga
def Apagar(matriz,coluna,peca,nova_linha):
    #Verifica onde a pe√ßa n√£o fixada est√° dentro do tabuleiro.
    for l in range(len(peca)):
        for c in range(len(peca[0])):
            #Ap√≥s encontrar a pe√ßa, cada parte dela ser√° substitu√≠da.
            if peca[l][c]!="‚¨õ":
                matriz[nova_linha + l][coluna + c] = "‚¨õ"

def gravidade(matriz,peca,coluna, nova_linha,Pontua√ß√£o,jogador):
    #Esta fun√ß√£o agrupa outras fun√ß√µes para simular a gravidade.
    nova_linha=0
    
    #Enquanto a verifica√ß√£o de colis√£o n√£o for Falsa
    while Verificar(matriz,peca,coluna,nova_linha):
        
        #Chama a fun√ß√£o que apaga pe√ßa.
        Apagar(matriz,coluna,peca,nova_linha)
        nova_linha += 1

        #Chama as fun√ß√µes respons√°veis pelo giro e movimenta√ß√£o das pe√ßas.
        peca=girar(matriz,peca,coluna, nova_linha)        
        coluna=movimentar(matriz,peca,coluna, nova_linha)
        
    #Acelera a movimenta√ß√£o se o usu√°rio apertar "seta |"
    #                                                  v

        #Chama fun√ß√µes respons√°veis por inserir as pe√ßas e mostrar o tabuleiro.
        ColocarPeca(matriz,peca,coluna,nova_linha)   
        imprimirMatriz(matriz,Pontua√ß√£o,jogador)
        #Retarda o tempo e apaga o terminal.
        tempo=Dificuldade(Pontua√ß√£o)

        #Acelera a movimenta√ß√£o se o usu√°rio apertar "seta |" (para baixo)
        #                                                  v
        if keyboard.is_pressed("down"):
            #Modifica o tempo conforme o tempo anterior.
            if tempo== 0.5:
                tempo= 0.1
            elif tempo == 0.4:
                tempo= 0.1
            elif tempo== 0.2:
                tempo= 0.08
            elif tempo<0.2:
                tempo=0
            time.sleep(tempo)
        #Se a tecla n√£o for apertada o tempo continua sendo o mesmo
        else:
            time.sleep(tempo)
         
        os.system("cls")
    #Chama a fun√ß√£o da explos√£o da bomba se a Verifica√ß√£o for Falsa, ela est√° no final pois s√≥ ser√° acionada quando ela parar.         
    Bomba(matriz,peca,coluna,nova_linha,Pontua√ß√£o,jogador)

#Fun√ß√£o que apaga linha e insere linha e atribui pontua√ß√£o do jogador     
def apagarLinha (matriz,Pontua√ß√£o):
    remover_L=0
    Pontos=0
    #Verifica a matriz para achar as linhas completas
    for l in range (len(matriz)):
        linha=0
        for c in range(len(matriz[0])):
            if matriz[l][c]=="üü™":
                linha+=1
        #Apaga e insere nova(s) linha(s)
        if linha==10:    
            matriz.pop(l)
            matriz.insert(0,["|", "‚¨õ", "‚¨õ", "‚¨õ","‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "|"])
            remover_L+=1

    #Pontua√ß√£o de acordo com o n√∫mero de linhas exclu√≠das
    Pontos=(100*remover_L)
    #Pontos s√£o dobrados se forem removidas mais de uma linha
    if remover_L>1:
        Pontua√ß√£o+=Pontos*2
    else:
        Pontua√ß√£o+=Pontos

    return Pontua√ß√£o 

#Fun√ß√£o que altera a dificuldade de acordo com os pontos do jogador
def Dificuldade(Pontua√ß√£o):

    #Entre 200 e 500 pontos:
    if 200<=Pontua√ß√£o<=500:
        tempo=0.4
    #Entre 600 e 800 pontos:
    elif 600<=Pontua√ß√£o<=800:
        tempo=0.2
    #Com mais de 1000 pontos:
    elif Pontua√ß√£o>=1000:
        tempo=0.05
    #Menos de 200:
    else:
        tempo=0.5

    return tempo

def InicioJogo(T√≠tulo):

    #La√ßo que imprime o t√≠tulo (TETRIS)
    for l in T√≠tulo:
        print(f"{l}\033[34m")
        time.sleep(0.5)
    print()
    #Informa√ß√µes do jogador e in√≠cio de jogo
    jogador=input(f"Ôº§ÔΩâÔΩáÔΩâÔΩîÔΩÖ ÔΩìÔΩÖÔΩï ÔΩéÔΩèÔΩçÔΩÖÔºö")
    print(f"\tüáß üá™ üá≤ - üáª üáÆ üá≥ üá© üá¥ ! \n{"\tüá© üáÆ üáª üáÆ üá∑ üáπ üá¶ - üá∏ üá™ !"}\n{"\t\t‚è≥\033[037m"}",end="")
    time.sleep(3)
    os.system("cls")

    return jogador

def Tutorial(T√≠tulo):
    #Imprime o t√≠tulo (TUTORIAL)
    for l in T√≠tulo:
        print(f"{l}\033[34m")
    print()
    #Informa√ß√µes sobre os bot√µes
    print("Ôº∞ÔΩÅÔΩíÔΩÅ ÔΩäÔΩèÔΩáÔΩÅÔΩí ÔΩïÔΩîÔΩâÔΩåÔΩâÔΩöÔΩÖ ÔΩÅÔΩì ÔΩìÔΩÖÔΩáÔΩïÔΩâÔΩéÔΩîÔΩÖÔΩì ÔΩîÔΩÖÔΩÉÔΩåÔΩÅÔΩìÔºö\n")
    print(f"{"‚¨ÜÔ∏è  - ùôãùôñùôßùôñ ùôúùôûùôßùôñùôß":>36}\n{"ùôãùôñùôßùôñ ùôöùô®ùô¶ùô™ùôöùôßùôôùôñ -  ‚¨ÖÔ∏è  ‚¨áÔ∏è  ‚û°Ô∏è  - ùôãùôñùôßùôñ ùôôùôûùôßùôöùôûùô©ùôñ"}")
    print(f"{"|-ùôãùôñùôßùôñ ùôñùôòùôöùô°ùôöùôßùôñùôß":>36}\n\n{"\033[37m‚òÖ Forme linhas horizontais para adquirir pontos"}\n{"‚òÖ N√£o deixe as pe√ßas tocarem o topo "}\n{"‚òÖ A dificuldade √© aumentada junto com a pontua√ß√£o"}\n\n")
    print("=-"*15,end="")
    print("ATEN√á√ÉO",end="")
    print("=-"*15)
    print(f"{"A bomba |üí£| destr√≥i uma √°rea de 3x3 blocos."}\n\n{"üá® üá¶ üá∑ üá∑ üá™ üá¨ üá¶ üá≥ üá© üá¥ ‚è≥\033[37m"}")
    time.sleep(10)
    os.system("cls")
    
def FimDeJogo(T√≠tulo,Pontua√ß√£o,jogador):
    
    #La√ßo que imprime o t√≠tulo (GAME-OVER)
        for l in T√≠tulo:
            print(f"{l}\033[34m")
            time.sleep(0.5)

        #Esp√©cie de um cron√¥metro utilizando loop
        verif=True
        i=0
        while verif:
            if i>0:
                for l in T√≠tulo:
                    print(f"{l}\033[34m")

            #Impress√£o dos pontos
            print(f"üáØ üá¥ üá¨ üá¶ üá© üá¥ üá∑: {jogador} {"\033[037müáµ üá¥ üá≥ üáπ üá¥ üá∏  üáπ üá¥ üáπ üá¶ üáÆ üá∏ :":>10}{Pontua√ß√£o} pontos.\n {"\033[034m üá≥ üá¥ üáª üá¥  üáØ üá¥ üá¨ üá¥: SEGURE Tecla (P)"}\t{"üá∏ üá¶ üáÆ üá∑: SEGURE Tecla (S)"}")
            i+=1
            #O jogador tem apenas 30 segundos para escolher.
            print(f"ESCOLHA ANTES QUE O CRON√îMETRO CHEGUE A 30s  -> |{i}| segundos\033[37m")
            time.sleep (1)
            os.system("cls")
            
            if i <30:
                #Comando para reiniciar
                if keyboard.is_pressed("p"):
                    os.system("cls")
                    time.sleep(3)
                    os.system("cls")
                    verif=False
                    Game=True
                    return Game
                
                #Comando para finalizar o jogo
                elif keyboard.is_pressed("s"):
                    print("!! üáØ üá¥ üá¨ üá¥  üá´ üáÆ üá≥ üá¶ üá± üáÆ üáø üá¶ üá© üá¥ !!")
                    verif=False
                    Game=False
                    return Game
                #Se o jogador n√£o escolher, o jogo termina
            else:
                print(" !! Ôº™ÔΩèÔΩáÔΩè ÔΩÜÔΩâÔΩéÔΩÅÔΩåÔΩâÔΩöÔΩÅÔΩÑÔΩè, ÔΩêÔΩèÔΩâÔΩì ÔΩè ÔΩîÔΩÖÔΩçÔΩêÔΩè ÔΩÅÔΩÉÔΩÅÔΩÇÔΩèÔΩï !!")
                verif=False
                Game=False
                return Game
    
#Fun√ß√£o principal:
def main():
    #T√≠tulos que ser√£o impressos no in√≠cio e fim de jogo
    T_Inicio=[" ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñÄ‚ñë ‚ñà‚ñÄ‚ñÄ",
              " ‚ñë‚ñë‚ñà‚ñë‚ñë ‚ñà‚ñÄ‚ñÄ ‚ñë‚ñë‚ñà‚ñë‚ñë ‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñÄ‚ñÄ‚ñà",
              " ‚ñë‚ñë‚ñÄ‚ñë‚ñë ‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñë‚ñÄ‚ñë‚ñë ‚ñÄ‚ñë‚ñÄ‚ñÄ ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ‚ñÄ"]
    T_Tutorial= ["‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñë‚ñë‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñÄ‚ñë ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñë‚ñë",
                 "‚ñë‚ñí‚ñà‚ñë‚ñë ‚ñà‚ñë‚ñë‚ñà ‚ñë‚ñë‚ñà‚ñë‚ñë ‚ñà‚ñë‚ñë‚ñà ‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñë‚ñë",
                 "‚ñë‚ñí‚ñà‚ñë‚ñë ‚ñë‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñë‚ñÄ‚ñë‚ñë ‚ñÄ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñë‚ñÄ‚ñÄ ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñë‚ñë‚ñÄ ‚ñÄ‚ñÄ‚ñÄ"]
    T_Fim=["‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ   ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñë‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ‚ñà",
         "‚ñà‚ñë‚ñÑ‚ñÑ ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñà‚ñÄ‚ñÄ   ‚ñà‚ñë‚ñë‚ñà ‚ñë‚ñà‚ñÑ‚ñà‚ñë ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÑ‚ñÄ",
         "‚ñà‚ñÑ‚ñÑ‚ñà ‚ñÄ‚ñë‚ñë‚ñÄ ‚ñÄ‚ñë‚ñë‚ñë‚ñÄ ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñë‚ñÄ‚ñë‚ñë ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñë‚ñÄ‚ñÄ"]
    
    #Bloco de pe√ßas do jogo:
    peca_I = [["üü™","üü™","üü™","üü™"]]
    peca_T = [["üü™","üü™","üü™"], ["‚¨õ","üü™","‚¨õ"]]
    peca_L = [["‚¨õ","‚¨õ","üü™"], ["üü™","üü™","üü™"]]
    peca_J = [["üü™","‚¨õ","‚¨õ"],["üü™","üü™","üü™"]]
    peca_O = [["üü™","üü™"], ["üü™","üü™"]]
    peca_S = [["‚¨õ","üü™","üü™"], ["üü™","üü™","‚¨õ"]]
    peca_Z = [["üü™","üü™","‚¨õ"], ["‚¨õ","üü™","üü™"]]
    bomba=[["üí£"]]
    #Lista com todas as pe√ßas
    formas = [peca_I, peca_T, peca_J, peca_L, peca_O, peca_S, peca_Z,peca_I, peca_T, peca_J, peca_L, peca_O, peca_S, peca_Z,bomba]
    
    #Cria o tabuleiro vazio:
    matriz =[["|","‚¨õ", "‚¨õ","‚¨õ","‚¨õ","‚¨õ","‚¨õ","‚¨õ","‚¨õ","‚¨õ","‚¨õ","|"]for l in range(20)]
    
    #Vari√°veis iniciadas:
    Game_Over=True
    Pontua√ß√£o=0
    nova_linha=0

    #Exibe o in√≠cio do jogo.
    jogador=InicioJogo(T_Inicio)
    #Exibe o tutorial
    Tutorial(T_Tutorial)

    #La√ßo principal:
    while Game_Over==True:
        #Atualiza o formato da pe√ßa.
        peca = escolherForma(formas)

        #Cria um limite m√°ximo para a coluna de surgimento.
        limite=11-(len(peca[0]))
        #O surgimento da pe√ßa no in√≠cio do tabuleiro √© aleat√≥rio.
        coluna = random.randint(1,limite)

        #Chama a fun√ß√£o para inserir a pe√ßa no tabuleiro.
        ColocarPeca(matriz, peca, coluna,nova_linha)
        #Chama a fun√ß√£o para imprimir a matriz.
        imprimirMatriz(matriz,Pontua√ß√£o,jogador)
        time.sleep(1)
        #Aapaga o terminal.
        os.system("cls")
        
        #Chama a fun√ß√£o para simular a gravidade.
        gravidade(matriz, peca, coluna, nova_linha,Pontua√ß√£o,jogador)

        #Chama a fun√ß√£o, reservando o valor atualizado da pontua√ß√£o.
        Pontua√ß√£o=apagarLinha(matriz,Pontua√ß√£o)

        #Verifica se alguma pe√ßa fixada encostou no topo do tabuleiro.
        for c in range(len(matriz[0])):
            if matriz[0][c]=="üü™":
                #Imprime e carrega.
                print(f"{"üá® üá¶ üá∑ üá∑ üá™ üá¨ üá¶ üá≥ üá© üá¥ ‚è≥":>20}")
                time.sleep(3)
                os.system("cls")

                #Chama a fun√ß√£o, reservando o valor retornado.
                Game_Over=FimDeJogo(T_Fim,Pontua√ß√£o,jogador)

                #Atualiza tabuleiro por um vazio e zera os pontos.
                matriz =[["|", "‚¨õ", "‚¨õ", "‚¨õ","‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "|"]for l in range(20)]
                Pontua√ß√£o =0
if __name__=="__main__":
    main()                